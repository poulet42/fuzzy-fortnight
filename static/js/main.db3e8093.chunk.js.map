{"version":3,"sources":["api/index.js","components/Chat/ChatNav.js","components/Chat/ChatInput.js","components/Chat/Message/Message.js","utils/prettyDate.js","components/Chat/Message/index.js","components/Loader/index.js","components/Loader/Loader.js","components/Chat/ChatMain.js","components/Chat/index.js","components/Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["getChannelMessages","channelId","Promise","resolve","setTimeout","messages","data","filter","m","channel","sendMessageToChannel","_ref","content","newMessage","id","uuid","ts","Date","now","Object","toConsumableArray","concat","ChannelsList","channels","selected","onChannelChange","react_default","a","createElement","className","map","_ref2","label","key","cx","Chat__channel-btn--selected","onClick","ChatInput","state","message","handleMessageChange","e","_this","setState","currentTarget","value","handleMessageSubmit","preventDefault","props","onMessageSend","this","placeholder","onSubmit","type","onChange","hidden","React","Component","Message","username","src","alt","dateTime","Intl","DateTimeFormat","hour","minute","format","prettyDate","defaultProps","Loader","width","height","viewBox","strokeWidth","fill","stroke","strokeMiterlimit","cy","r","strokeLinecap","opacity","d","data-cap","data-color","ChatMain","loading","loadMessages","then","sendMessage","serverMessage","s","prevProps","_this$state","components_Loader","Fragment","msgProps","Chat_Message","assign","Chat_ChatInput","Chat","changeChannel","_this2","ChatNav","Chat_ChatMain","App","components_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db3e8093.chunk.js","sourcesContent":["import channels from \"./channels.json\";\nimport messages from \"./messages.json\";\nimport uuid from \"uuid/v1\";\n\n// use fake timeouts to simulate API call\n\nexport const getChannels = () =>\n  new Promise(resolve => {\n    setTimeout(resolve, 2000, channels.data);\n  });\n\nexport const getChannelMessages = channelId =>\n  new Promise(resolve => {\n    setTimeout(\n      resolve,\n      2000,\n      messages.data.filter(m => m.channel === channelId)\n    );\n  });\n\nexport const sendMessageToChannel = ({ channel, content }) => {\n  const newMessage = { id: uuid(), ts: Date.now(), content, channel };\n  messages.data = [...messages.data, newMessage]; // can mutate import properties\n  return new Promise(resolve => {\n    setTimeout(resolve, 0, newMessage); // a \"POST\" query should return the newly created item\n  });\n};\n","import React from \"react\";\nimport cx from \"classnames\";\n\nconst ChannelsList = ({ channels, selected, onChannelChange }) => (\n  <nav className=\"Chat__nav\">\n    {channels.map(({ id, label }) => (\n      <button\n        key={id}\n        className={cx(\"Chat__channel-btn\", {\n          \"Chat__channel-btn--selected\": selected === id\n        })}\n        onClick={() => onChannelChange(id)}\n      >\n        {label}\n      </button>\n    ))}\n  </nav>\n);\n\nexport default ChannelsList;\n","import React from \"react\";\n\nclass ChatInput extends React.Component {\n  state = {\n    message: \"\"\n  };\n\n  handleMessageChange = e => {\n    this.setState({\n      message: e.currentTarget.value\n    });\n  };\n\n  handleMessageSubmit = e => {\n    e.preventDefault();\n    this.props.onMessageSend(this.state.message);\n    this.setState({\n      message: \"\"\n    });\n  };\n\n  render() {\n    const { message } = this.state;\n    const { placeholder } = this.props;\n    return (\n      <form className=\"Chat__input-wrapper\" onSubmit={this.handleMessageSubmit}>\n        <input\n          type=\"text\"\n          className=\"Chat__input\"\n          value={message}\n          onChange={this.handleMessageChange}\n          placeholder={placeholder}\n        />\n        <input type=\"submit\" hidden />\n      </form>\n    );\n  }\n}\n\nexport default ChatInput;\n","import React from \"react\";\nimport pp from \"prop-types\";\nimport prettyDate from \"../../../utils/prettyDate\";\nimport \"./styles.scss\";\n\nconst Message = ({ id, ts, content, username }) => (\n  <div key={id} className=\"Message\">\n    <img\n      src={`https://api.adorable.io/avatars/36/${username}.jpg`}\n      className=\"Message__avatar\"\n      alt={username}\n    />\n    <div className=\"Message__body\">\n      <time className=\"Message__time\" dateTime={ts}>\n        {prettyDate(ts)}\n      </time>\n      <span className=\"Message__text\">{content}</span>\n    </div>\n  </div>\n);\n\nMessage.propTypes = {\n  id: pp.string.isRequired,\n  ts: pp.oneOfType([pp.number, pp.instanceOf(Date)]),\n  content: pp.string,\n  username: pp.string\n};\n\nMessage.defaultProps = {\n  ts: 0,\n  content: \"\",\n  username: \"Corentin\"\n};\n\nexport default Message;\n","export default ts =>\n  new Intl.DateTimeFormat(\"fr-FR\", {\n    hour: \"numeric\",\n    minute: \"numeric\"\n  }).format(new Date(ts));\n","import Message from \"./Message\";\n\nexport default Message;\n","import Loader from \"./Loader\";\n\nexport default Loader;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Loader = ({ className }) => (\n  <div className=\"Loader\">\n    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 64 64\">\n      <g\n        strokeWidth=\"2\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeMiterlimit=\"10\"\n      >\n        <circle cx=\"32\" cy=\"32\" r=\"30\" strokeLinecap=\"square\" opacity=\"0.4\" />\n        <path\n          d=\"M32,2A30,30,0,0,1,62,32\"\n          data-cap=\"butt\"\n          data-color=\"color-2\"\n        />\n      </g>\n    </svg>\n  </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport { getChannelMessages, sendMessageToChannel } from \"../../api\";\nimport ChatInput from \"./ChatInput\";\nimport Message from \"./Message\";\nimport Loader from \"../Loader\";\n\nclass ChatMain extends React.Component {\n  state = {\n    messages: [],\n    loading: true\n  };\n\n  loadMessages = () => {\n    this.setState({ loading: true });\n    const channel = this.props.channel;\n    getChannelMessages(this.props.channel).then(messages => {\n      if (channel !== this.props.channel) return;\n      this.setState({\n        messages,\n        loading: false\n      });\n    });\n  };\n  componentDidMount() {\n    this.loadMessages();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.channel !== this.props.channel) {\n      this.loadMessages();\n    }\n  }\n\n  sendMessage = content => {\n    const { channel } = this.props;\n    sendMessageToChannel({ channel, content }).then(serverMessage => {\n      this.setState(s => ({\n        messages: [...s.messages, serverMessage]\n      }));\n    });\n  };\n\n  render() {\n    const { messages, loading } = this.state;\n    const { channel } = this.props;\n    return (\n      <main className=\"Chat__main\">\n        {loading ? (\n          <div className=\"Chat__main-overlay\">\n            <Loader />\n          </div>\n        ) : (\n          <>\n            <div className=\"Chat__messages\">\n              {messages.map(msgProps => (\n                <Message key={msgProps.id} {...msgProps} />\n              ))}\n            </div>\n            <ChatInput\n              onMessageSend={this.sendMessage}\n              placeholder={`Envoyer un message au channel ${channel}`}\n            />\n          </>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default ChatMain;\n","import Chat from \"./Chat\";\n\nexport default Chat;\n","import React from \"react\";\nimport { getChannels } from \"../../api\";\nimport ChatNav from \"./ChatNav\";\nimport ChatMain from \"./ChatMain\";\nimport \"./styles.scss\";\nimport Loader from \"../Loader\";\n\nclass Chat extends React.Component {\n  state = {\n    channels: [],\n    selected: null,\n    loading: true\n  };\n\n  componentDidMount() {\n    getChannels().then(channels => {\n      this.setState({\n        channels,\n        loading: false\n      });\n    });\n  }\n\n  changeChannel = selected => {\n    this.setState({ selected });\n  };\n\n  render() {\n    const { channels, selected, loading } = this.state;\n    return (\n      <div className=\"Chat\">\n        <aside className=\"Chat__aside\">\n          {loading ? (\n            <div className=\"Chat__aside-overlay\">\n              <Loader />\n            </div>\n          ) : (\n            <ChatNav\n              channels={channels}\n              onChannelChange={this.changeChannel}\n              selected={selected}\n            />\n          )}\n        </aside>\n        {selected && <ChatMain channel={selected} />}\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"./components/Chat\";\n\nconst App = () => <Chat />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}